## 前言

> 哈喽，大家好，我是`asong`。今天与大家聊一聊`GO`语言中的切片，切片是`Go`语言中的一个特有概念，很多`Go`语言初学者都会把切片当作其他语言中的数组来使用，这就避免不了产生一些`bug`，所以深入理解切片的概念就很重要，今天就与大家一起深入探讨一下切片。



## 什么是array(数组)

在介绍切片之前，还是有必要在谈论一下数组的。相信大多数朋友入门编程时都是学习的`C`语言，再讲数组这一节时，会给这样一个定义：数组是在内存中连续存储的具有相同类型的一组数据的集合。在`C语言`中我们可以这样定义一个一维数组：

```c
int a[5]
```

这里表示定义了一个整型数组，数组名为`a`，定义的数组称为数组`a`，数组的长度为5，如果我们把这个5去掉，编译器就会提示错误，说你没有指定长度，所以我们又可以得出一个结论，数组一定是有长度的，在初始化时就要指定好。同理`Go语言`中的数组也是这样，我们可以这样声明一个数组：

```go
var buf [125]byte
```

声明了一个数组变量`buf`，其中数组长度是125，这里与`C语言`没有任何区别，但是如果你把数组长度`125`去掉，换成这样写：

```go
var buf []byte
```

是没有任何问题的，编译也是可以通过的，这就引出了`Go`语言中切片的概念，接下来我们来看一看什么是切片。

## 什么是slice(切片)

切片是对数组的抽象，因为数组的长度是不可变的，在某些场景下使用起来就不是很方便，所以`Go`语言提供了一种灵活，功能强悍的内置类型切片("动态数组")，与数组相比切片的长度是不固定的，可以追加元素。切片是一种数据结构，切片不是数组，切片描述的是一块数组。我们可以直接声明一个未指定大小的数组来定义切片，也可以使用`make()`函数来创建切片，看个例子：

```go
func main()  {
	var buf []byte
	fmt.Println(buf)
	var bufMake []byte = make([]byte,5)
	fmt.Println(bufMake)
}
// 运行结果
[]
[0 0 0 0 0]
```

根据运行结果，可以发现使用`make`定义的切片打印出来的结果中都是`0`，这是因为使用`make`进行初始化时指定了切片长度，这样这个刚初始化的切片中每个元素都会初始化为`0`。





## array和slice的区别



## slice的扩容



## slice的深拷贝和浅拷贝



## 空切片、nil切片



## 参数是slice 和 slice指针有什么区别

 

## 总结

